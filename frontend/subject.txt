
# Exercices React avec TypeScript et Tailwind CSS

Ces exercices vous permettront d'apprendre React avec TypeScript tout en utilisant Tailwind CSS pour le style.

## 1. Composants

### Exercice 1.1 : Composant de carte

**Objectif :** Créer un composant `Card` réutilisable avec Tailwind CSS.

**Instructions :**
1. Créez un fichier `Card.tsx` dans le dossier `src/components/`
2. Implémentez un composant fonctionnel qui affiche une carte stylisée avec:
   - Un padding approprié (`p-4` ou `p-6`)
   - Des coins arrondis (`rounded-lg`)
   - Une ombre (`shadow-md`)
   - Un fond blanc (`bg-white`)
3. Le composant doit accepter du contenu enfant (children) avec le bon typage
4. Importez et utilisez ce composant dans `App.tsx` avec du contenu de test

## 2. Props typées avec style dynamique

### Exercice 2.1 : Badge avec variantes

**Objectif :** Créer un composant `Badge` qui accepte différentes variantes de couleur.

**Instructions :**
1. Créez un fichier `Badge.tsx` dans `src/components/`
2. Définissez une interface `BadgeProps` avec:
   - Une prop `text` (string)
   - Une prop `variant` qui peut être: "primary", "success", "warning", "danger" (utilisez un type union)
   - Une prop optionnelle `size` qui peut être: "sm", "md", "lg"
3. Utilisez des classes Tailwind conditionnelles basées sur ces props
4. Exemples de classes à utiliser:
   - Primary: `bg-blue-100 text-blue-800`
   - Success: `bg-green-100 text-green-800`
   - Warning: `bg-yellow-100 text-yellow-800`
   - Danger: `bg-red-100 text-red-800`
   - Taille sm: `text-xs px-2 py-0.5`
   - Taille md: `text-sm px-2.5 py-1`
   - Taille lg: `text-base px-3 py-1.5`
5. Créez plusieurs instances du badge avec différentes combinaisons de props

## 3. État (State) avec style réactif

### Exercice 3.1 : Compteur avec feedback visuel

**Objectif :** Créer un compteur où le style change en fonction de la valeur.

**Instructions :**
1. Créez un fichier `StyledCounter.tsx` dans `src/components/`
2. Utilisez `useState<number>` pour stocker la valeur du compteur
3. Ajoutez des boutons d'incrémentation et de décrémentation avec:
   - Des classes `bg-blue-500 hover:bg-blue-600 text-white rounded px-4 py-2`
   - Un espacement entre les boutons (`space-x-2`)
4. Affichez la valeur du compteur au centre avec une taille de police qui augmente avec la valeur
   - Utilisez une fonction qui retourne des classes Tailwind dynamiques
   - Si count < 0: `text-red-500`
   - Si count = 0: `text-gray-500`
   - Si 0 < count < 5: `text-blue-500`
   - Si count >= 5: `text-green-500 font-bold`
5. Ajoutez une animation de transition sur les changements de couleur (`transition-colors duration-300`)

## 4. Hooks personnalisés avec thème

### Exercice 4.1 : Hook de thème sombre/clair

**Objectif :** Créer un hook `useDarkMode` qui permet de basculer entre thème clair et sombre.

**Instructions :**
1. Créez un fichier `useDarkMode.ts` dans `src/hooks/`
2. Le hook doit:
   - Retourner un boolean `isDarkMode` et une fonction `toggleDarkMode`
   - Stocker la préférence dans localStorage
   - Appliquer la classe `dark` à l'élément HTML lorsque le mode sombre est activé
3. Créez un composant `ThemeToggle.tsx` dans `src/components/` qui utilise ce hook
4. Le bouton doit changer d'apparence selon le thème:
   - Mode clair: icône lune, `bg-gray-200`
   - Mode sombre: icône soleil, `bg-gray-800 text-white`
5. Utilisez le système de dark mode de Tailwind en configurant des classes comme:
   - `bg-white dark:bg-gray-800`
   - `text-gray-900 dark:text-gray-100`

## 5. Formulaire avec validation et feedback visuel

### Exercice 5.1 : Champ de formulaire avec état

**Objectif :** Créer un composant de champ de formulaire réutilisable avec validation et feedback.

**Instructions :**
1. Créez un fichier `FormField.tsx` dans `src/components/`
2. Définissez une interface `FormFieldProps` avec:
   - `label`: string
   - `name`: string
   - `type`: "text" | "email" | "password"
   - `value`: string
   - `onChange`: (e: React.ChangeEvent<HTMLInputElement>) => void
   - `error`: string | undefined
   - `required`: boolean (optionnel)
3. Stylisez le champ avec Tailwind:
   - Conteneur: `mb-4`
   - Label: `block text-sm font-medium text-gray-700 mb-1`
   - Input valide: `w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500`
   - Input avec erreur: `border-red-500 focus:border-red-500 focus:ring-red-500`
   - Message d'erreur: `mt-1 text-sm text-red-600`
4. Ajoutez un indicateur visuel pour les champs obligatoires (petite étoile rouge)
5. Créez un composant `LoginForm.tsx` qui utilise ce FormField pour un formulaire de connexion

## 6. Design responsive avec Tailwind

### Exercice 6.1 : Grille de cartes responsive

**Objectif :** Créer une grille de cartes qui s'adapte aux différentes tailles d'écran.

**Instructions :**
1. Créez un composant `CardGrid.tsx` dans `src/components/`
2. Définissez une interface `CardItem` avec `id`, `title`, `description` et `imageUrl`
3. Le composant doit accepter un tableau d'items de type `CardItem[]`
4. Utilisez les classes responsives de Tailwind:
   - Conteneur: `grid gap-6`
   - Sur mobile: `grid-cols-1`
   - Sur tablette: `md:grid-cols-2`
   - Sur desktop: `lg:grid-cols-3`
   - Sur grand écran: `xl:grid-cols-4`
5. Chaque carte doit avoir:
   - Une image en haut avec `aspect-video object-cover`
   - Un titre en `text-xl font-semibold`
   - Une description en `text-gray-600`
   - Un effet de hover avec une légère augmentation de l'ombre `hover:shadow-lg transition-shadow`

## 7. Liste avec animations et interactivité

### Exercice 7.1 : Liste d'éléments interactive

**Objectif :** Créer une liste d'éléments avec des effets de hover et de clic.

**Instructions :**
1. Créez un composant `InteractiveList.tsx` dans `src/components/`
2. Définissez une interface `ListItem` avec `id`, `title` et `isActive` (boolean)
3. Utilisez `useState` pour suivre l'élément actif
4. Pour chaque élément de la liste:
   - Appliquez `px-4 py-3 border-b last:border-b-0`
   - Si inactif: `bg-white hover:bg-gray-50 cursor-pointer transition-colors`
   - Si actif: `bg-blue-50 border-l-4 border-l-blue-500`
   - Animez la transition avec `transition-all duration-200`
5. Lors du clic sur un élément, mettez à jour l'état pour le marquer comme actif
6. Ajoutez une légère animation de scale au clic avec `active:scale-[0.98]`

## 8. Navigation avec style dynamique

### Exercice 8.1 : Barre de navigation responsive

**Objectif :** Créer une barre de navigation responsive avec des liens actifs stylisés.

**Instructions :**
1. Créez un composant `Navbar.tsx` dans `src/components/`
2. Définissez une interface `NavItem` avec `id`, `label` et `path`
3. Le composant doit:
   - Être fixé en haut de l'écran (`fixed top-0 w-full`)
   - Avoir un fond avec légère transparence (`bg-white/90 backdrop-blur-sm`)
   - Être responsive: menu hamburger sur mobile, liens horizontaux sur desktop
   - Avoir des transitions fluides pour le menu mobile
4. Pour les liens:
   - Style de base: `px-3 py-2 text-gray-600 hover:text-gray-900`
   - Lien actif: `text-blue-600 font-medium`
   - Animation au hover: `relative` avec un `::after` qui apparaît en `hover:w-full`
5. Utilisez un état pour suivre si le menu mobile est ouvert ou fermé

## 9. Formulaire multi-étapes avec indicateur de progression

### Exercice 9.1 : Stepper avec feedback visuel

**Objectif :** Créer un formulaire multi-étapes avec indicateur de progression stylisé.

**Instructions :**
1. Créez un dossier `src/components/stepper/`
2. Dans ce dossier, créez:
   - `Stepper.tsx`: Composant principal qui gère les étapes
   - `Step.tsx`: Composant pour une étape individuelle
   - `StepIndicator.tsx`: Indicateur visuel de progression
3. Le `StepIndicator` doit utiliser:
   - Des cercles connectés par des lignes
   - Couleur pour les étapes complétées: `bg-green-500`
   - Couleur pour l'étape actuelle: `bg-blue-500`
   - Couleur pour les étapes futures: `bg-gray-300`
   - Transitions fluides entre les états
4. Le contenu de chaque étape doit apparaître avec une animation fade
5. Ajoutez des boutons "Précédent" et "Suivant" avec des états désactivés appropriés

## 10. Système de notifications avec Tailwind

### Exercice 10.1 : Composant de notification avec variantes

**Objectif :** Créer un système de notifications empilables avec différents types.

**Instructions :**
1. Créez un dossier `src/components/notifications/`
2. Créez les composants:
   - `NotificationContainer.tsx`: Conteneur pour empiler les notifications
   - `Notification.tsx`: Composant individuel de notification
3. Définissez une interface `NotificationType` avec: "success", "error", "warning", "info"
4. Le composant `Notification` doit avoir:
   - Des styles différents selon le type (couleurs Tailwind appropriées)
   - Un bouton de fermeture
   - Une animation d'entrée et de sortie
   - Une fonction de fermeture automatique après un délai
5. Le conteneur doit positionner les notifications en haut à droite de l'écran
6. Utilisez `z-index` approprié pour assurer la visibilité
7. Créez une fonction `showNotification` qui permet d'ajouter facilement des notifications

## Conseils pour l'utilisation de Tailwind CSS

- Utilisez les classes utilitaires directement dans les composants
- Pour les variations conditionnelles, utilisez des fonctions qui retournent des chaînes de classes
- Utilisez la bibliothèque `classnames` ou `clsx` pour combiner des classes conditionnelles
- N'hésitez pas à utiliser des pseudo-classes (`hover:`, `focus:`, `active:`, etc.)
- Exploitez les préfixes responsives (`sm:`, `md:`, `lg:`, `xl:`)
- Pour le mode sombre, utilisez le préfixe `dark:` après avoir configuré le mode sombre dans Tailwind

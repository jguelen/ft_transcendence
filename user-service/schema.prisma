datasource db {
	provider = "sqlite"
	url = env("DATABASE_URL")
}

generator client {
	provider = "prisma-client-js"
}


model User {
	id				Int @id @unique @default(autoincrement())
	name			String
	email			String	@unique
	password		String?
	language		String	@default("en")
	rank			Int		@default(1)
	keymap			String	@default("qa69")

	blockedUsers	BlockedUser[] @relation("blockerToBlocked")
	blockedByUsers	BlockedUser[] @relation("blockedToBlocker")
	friends1		Friendship[] @relation("user1ToUser2")
	friends2		Friendship[] @relation("user2ToUser1")
	friendshipReqs	FriendshipRequest[] @relation("requesterToRequested")
	ReqByUsers		FriendshipRequest[] @relation("requestedToRequester")
}

model FriendshipRequest {
	requester		User @relation("requesterToRequested", fields: [requesterId], references: [id], onDelete: Cascade)
	requesterId		Int
	requested		User @relation("requestedToRequester", fields: [requestedId], references: [id], onDelete: Cascade)
	requestedId		Int
	declined		Int @default(0)
	createdAt		DateTime @default(now())

	@@id([requesterId, requestedId])
}

model Friendship {
	user1		User @relation("user1ToUser2", fields: [user1Id], references: [id], onDelete: Cascade)
	user1Id		Int
	user2		User @relation("user2ToUser1", fields: [user2Id], references: [id], onDelete: Cascade)
	user2Id		Int
	createdAt	DateTime @default(now())

	@@id([user1Id, user2Id])
}

model BlockedUser {
	blocker		User @relation("blockerToBlocked", fields: [blockerId], references: [id], onDelete: Cascade)
	blockerId	Int
	blocked		User @relation("blockedToBlocker", fields: [blockedId], references: [id], onDelete: Cascade)
	blockedId	Int
	createdAt	DateTime @default(now())

	@@id([blockerId, blockedId])
}
